{"version":3,"sources":["js/task1.js","js/task2.js","js/task3.js","index.js"],"names":["delay","ms","Promise","resolve","reject","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","callback","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAKA,MAAMA,EAAQC,GACH,IAAIC,QAAQ,CAACC,EAASC,IAAWD,EAAQF,IAG9CI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACVjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,EAAUC,IAElC,IAAId,QAAQ,CAACC,EAASC,KACzBD,EAAQW,EAASG,IAAIC,GAAQA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,MAK5Fb,EAASc,GAAgBZ,QAAQa,MAAMD,GAE7CN,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACjBnC,MAAMgB,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,GACd,IAAI1B,QAAQ,CAACC,EAASC,KACnBJ,MAAAA,EAAQqB,EAA0B,IAAK,KAC1BG,KAAKE,SAAW,IAG/BvB,EAAQ,CAACyB,EAAYC,GAAI7B,IAG7BI,EAAQwB,EAAYC,MAItBC,EAAa,EAAED,EAAIvB,MACvBC,QAAQC,mBAAmBqB,kBAAmBvB,SAG1CyB,EAAWF,IACftB,QAAQyB,qCAAqCH,+BAG/CF,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC7BxB,KAAKqB,GACLI,MAAMH,GAEXJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC7BxB,KAAKqB,GACLI,MAAMH,GAEXJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MACjCxB,KAAKqB,GACLI,MAAMH;;ACzCP,aAHA,QAAA,oBACA,QAAA,cACA,QAAA,cACA,QAAA","file":"src.cac4de33.js","sourceRoot":"../src","sourcesContent":["// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\"\n// через ms миллисекунд.Значением исполнившегося промиса должно быть то кол - во миллисекунд\n// которое передали во время вызова функции delay.\n\n\nconst delay = ms => {\n    return new Promise((resolve, reject) => resolve(ms));\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","// Перепиши функцию toggleUserState() так, чтобы она не использовала\n// callback - функцию callback, а принимала всего два параметра allUsers\n// и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName, callback) => {\n\n    return new Promise((resolve, reject) => {\n        resolve(allUsers.map(user => user.name === userName ? { ...user, active: !user.active } : user,\n        ));\n    });\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","// Перепиши функцию makeTransaction() так, чтобы она не использовала\n// callback - функции onSuccess и onError, а принимала всего один\n// параметр transaction и возвращала промис.\n\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    return new Promise((resolve, reject) => {\n        const delay = randomIntegerFromInterval(200, 500);\n        const canProcess = Math.random() > 0.3;\n        \n        if (canProcess) {\n            resolve([transaction.id, delay])\n        }\n\n        reject (transaction.id);\n    })\n};\n\nconst logSuccess = ([id, time]) => {\n  console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n.then(logSuccess)\n.catch(logError);\n  \n    ","import './sass/main.scss';\nimport './js/task1';\nimport './js/task2';\nimport './js/task3';\n\n"]}